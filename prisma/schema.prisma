// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  experience            Int                    @default(0)
  balance               Int                    @default(0)
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Pickaxe {
  id            String  @id @default(cuid())
  name          String
  description   String
  price         Int
  multiplier    Int
}

model UserPickaxe {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  pickaxeId String
  pickaxe   Pickaxe    @relation(fields: [pickaxeId], references: [id], onDelete: Cascade)
  selected  Boolean

  @@unique([userId, pickaxeId])
}

model Planet {
  id            String  @id @default(cuid())
  name          String
  description   String
  price         Int
  multiplier    Int
}

model UserPlanet {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  planetId  String
  planet    Planet  @relation(fields: [planetId], references: [id], onDelete: Cascade)
  selected  Boolean

  @@unique([userId, toolId])
}

model Supply {
  id            String  @id @default(cuid())
  name          String
  description   String
  price         Int
  multiplier    Int
}

model UserSupply {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  supplyId  String
  supply    Supply  @relation(fields: [supplyId], references: [id], onDelete: Cascade)
  selected  Boolean

  @@unique([userId, toolId])
}

model Item {
  id            String  @id @default(cuid())
  name          String
  description   String
  price         Int
}

model UserItem {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId    String
  item      Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([userId, toolId])
}
